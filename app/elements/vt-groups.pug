link(rel='import', href='../bower_components/polymer/polymer.html')
link(rel='import', href='../bower_components/iron-ajax/iron-ajax.html')
link(rel='import', href='../bower_components/paper-spinner/paper-spinner.html')
link(rel='import', href='../bower_components/neon-animation/neon-animatable-behavior.html')
link(rel='import', href='../bower_components/vaadin-grid/vaadin-grid.html')
link(rel='import', href='../styles/shared-styles.html')
link(rel='import', href='../styles/app-theme.html')
link(rel='import', href='../styles/datatable-styles.html')
link(rel='import', href='./behaviors/refresh-behavior.html')
link(rel='import', href='./behaviors/routing-behavior.html')
dom-module#vt-groups
  template
    style(is='custom-style', include='app-theme')
    style(is='custom-style', include='shared-styles')
    style(is='custom-style', include='datatable-styles')
    style.
      :host {
        @apply(--layout-vertical);
        height: 100%;
      }
      h3 {
        text-decoration: none;
        color: var(--secondary-text-color);
        padding: 18px 0 0 12px;
      }
      .container {
        margin: 24px;
      }
      p.center {
        text-align: center;
      }
    .container
      vaadin-grid#grid(items='[[groups]]', on-selected-items-changed='showGroupForm')
        table
          colgroup
            col(name='id')
            col(name='attributes.organization')
            col(name='relationships.subscription.id')
            col(name='attributes.contact_emails')
          thead
            th ID
            th Name
            th Pay
            th Contacts
      p.center
        paper-spinner#spinner(active='[[loading]]')
      template(is='dom-if', if='[[!showGroups]]')
        h3#noGroups You don&apos;t have any groups yet.
    iron-ajax#vtApi(url='[[groupsApiPath()]]', last-response='{{apiResponse}}', loading='{{loading}}', on-error='handleError')
script.
  Polymer({
    is: 'vt-groups',
    behaviors: [
      window.Behaviors.RefreshBehavior,
      window.Behaviors.RoutingBehavior,
      Polymer.NeonAnimatableBehavior
    ],

    properties: {
      groups: {
        type: Array,
        value: [],
        notify: true
      },

      selectedGroupId: {
        type: String,
        value: null,
        notify: true
      },

      showGroups: {
        type: Boolean,
        value: false,
        computed: 'computeShowGroups(groups, loading)'
      },

      loading: {
        type: Boolean,
        value: true,
        notify: true,
      },

      filterText: {
        type: String,
        value: '',
        notify: true,
        observer: 'maybeRefresh'
      },

      filterTokens: {
        type: Array,
        value: []
      },

      sortColumn: {
        type: String,
        value: 'id',
        notify: true
      },

      sortOrder: {
        type: String,
        notify: true
      },

      animationConfig: {
        type: Object,
        value: function() {
          return {
            'exit': [{
              name: 'hero-animation',
              id: 'hero',
              fromPage: this
            }]
          };
        }
      }
    },

    observers: ['setGroups(apiResponse)'],

    refreshParams() {
      return {filter: this.filterText}
    },

    calculateVisibility: true,

    computeShowGroups(groups) {
      return (groups && groups.length) || this.loading;
    },

    fabAction() {
      this.set('selectedGroupId', null);
      page('/group_form');
    },

    setPageVars() {
      this.set('pageVars.mainTitle', '- Groups');
    },

    setGroups(apiResponse) {
        this.set('groups', (apiResponse && apiResponse.data) || [])
    },

    wrappable(array) {
      return array && array.join(', ');
    },

    toggle(ev) {
      this.querySelector(`#${ev.currentTarget.title}`).toggle();
    },

    showGroupForm(event) {
      let selected = this.$.grid.selection.selected();
      if (selected.length === 1) {
        let rowIndex = selected[0];
        let rowNum = rowIndex + 1;
        let row = this.$.grid.querySelector(`tbody tr:nth-child(${rowNum})`);
        this.sharedElements = {
          'hero': row
        };
        this.$.grid.getItem(rowIndex, (error, item) => {
          this.set('selectedGroupId', item.id);
          page(`/group_form/${item.id}`);
        });
      }
    }
  });
