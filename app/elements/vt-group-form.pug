link(rel='import', href='../bower_components/polymer/polymer.html')
link(rel='import', href='../bower_components/iron-form/iron-form.html')
link(rel='import', href='../bower_components/iron-ajax/iron-ajax.html')
link(rel='import', href='../bower_components/neon-animation/neon-animatable-behavior.html')
link(rel='import', href='../bower_components/paper-checkbox/paper-checkbox.html')
link(rel='import', href='../bower_components/paper-button/paper-button.html')
link(rel='import', href='../bower_components/paper-icon-button/paper-icon-button.html')
link(rel='import', href='../bower_components/paper-input/paper-input.html')
link(rel='import', href='../bower_components/paper-material/paper-material.html')
link(rel='import', href='../bower_components/vaadin-combo-box/vaadin-combo-box.html')
link(rel='import', href='../bower_components/vaadin-grid/vaadin-grid.html')
link(rel='import', href='../styles/app-theme.html')
link(rel='import', href='../styles/datatable-styles.html')
link(rel='import', href='../styles/shared-styles.html')
link(rel='import', href='./behaviors/country-code-behavior.html')
link(rel='import', href='./behaviors/frontend-maps-behavior.html')
link(rel='import', href='./behaviors/refresh-behavior.html')
link(rel='import', href='./behaviors/routing-behavior.html')
link(rel='import', href='./behaviors/vt-list-manager-behavior.html')
link(rel='import', href='./vt-list-manager.html')
dom-module#vt-group-form
  template
    style(is='custom-style', include='app-theme datatable-styles shared-styles')
    style.
      :host {
        @apply(--layout-vertical);
      }
      #main {
        background-color: #fafafa;
      }
      .container {
        @apply(--shadow-elevation-2dp);
        background-color: #ffffff;
        padding-left: 24px;
        padding-right: 24px;
        padding-top: 24px;
      }
      h4 {
        margin: 48px 0 0 0;
        min-width: 320px;
      }
      section.horizontal {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;

        -ms-flex-direction: row;
        -webkit-flex-direction: row;
        flex-direction: row;

        -ms-flex-pack: distribute;
        -webkit-justify-content: space-around;
        justify-content: space-around;

        -ms-flex-wrap: wrap;
        -webkit-flex-wrap: wrap;
        flex-wrap: wrap;
      }
      section.around {
        -ms-flex: 0 0 1 auto;
        -webkit-flex: 0 0 1 auto;
        flex: 0 0 1 auto;
      }
      paper-icon-button#addItemInput {
        color: var(--primary-color);
        background-color: var(--text-primary-color);
        border-radius: 50%;
        margin-top: 14px;
      }

      paper-icon-button.remove_item {
        color: var(--primary-color);
      }
      #addUserContainer {
        flex-flow: row nowrap;
        display: flex;
        justify-content: flex-start;
        align-items: flex-end;
      }

      table.paper-datatable > thead > tr > th {
        box-shadow: 0px 5px 5px -5px rgba(0,0,0,0.75);
        padding-left: 64px;
      }

    iron-ajax#vtApi(url='[[groupApiPath(groupId)]]', last-response='{{apiResponse}}', on-error='handleError')
    paper-material#main(elevation='0')
      .container
        section.toolbar
          paper-button(on-click='_onClearButtonClick') Cancel
          paper-button.primary(on-click='_submit') Save
        section
          paper-input(label='Organization', value='{{group.data.attributes.organization}}')
          paper-input(label='Legal Name', value='{{group.data.attributes.organization_legal_name}}')
          vaadin-combo-box(label='Country', value='{{group.data.attributes.country_iso}}', items='[[countryCodes]]', item-label-path='name', item-value-path='iso')
          section.horizontal
            section.around
              h4 Group Privileges
              template(is='dom-repeat', items='[[groupPrivileges]]', as='privilege')
                p
                  paper-checkbox(value='[[privilege.backend]]', checked='{{privilege.selected}}') [[privilege.frontend]]
              h4 Quotas
              template(is='dom-repeat', items='[[groupQuotas]]', as='quota')
                paper-input(label='[[quota.frontend]]', value='{{quota.value}}', name='[[quota.backend]]')
            section.around
              h4 Administrators
              vt-list-manager(list-values='{{group.data.relationships.administrators}}', label='Add Aministrator', list-item-value-path='id', default-object='[[defaultUserRelation]]')
              h4 Contacts
              vt-list-manager(list-values='{{group.data.attributes.contact_emails}}', label='Add Contact Email', email)
          h4 Users
          iron-a11y-keys(target="[[_listAddItemInput(listAddItemSelector, email)]]" keys="enter" on-keys-pressed="addListItem")
          #addUserContainer
            paper-input#addUserInput(label='Add User')
            paper-icon-button#addUserButton.self-end(elevation="0" icon="add" class="inline add_item" on-click="addListItem")
          table.paper-datatable(style='width: 100%')
            thead
              th ID
            tbody
              template(is='dom-repeat', items='[[group.data.relationships.users]]')
                tr
                  td
                    paper-icon-button.remove_item(mini icon='clear', on-click='removeListItem', value='[[item]]')
                    a(href='[[userPath(item.id)]]') [[item.id]]
        section.toolbar.bottom
          paper-button(on-click='_onClearButtonClick') Cancel
          paper-button.primary(on-click='_submit') Save
    iron-ajax#submit(url='[[groupsApiPath(groupId)]]', content-type='application/json', method='[[submitMethod]]', body='[[group]]', on-error='handleError')

script.
  Polymer({
    is: 'vt-group-form',
    behaviors: [
      Polymer.NeonAnimatableBehavior,
      window.Behaviors.CountryCodeBehavior,
      window.Behaviors.FrontendMapsBehavior,
      window.Behaviors.RefreshBehavior,
      window.Behaviors.RoutingBehavior,
      window.Behaviors.VtListManagerBehavior
    ],
    properties: {
      groupId: {
        type: String,
        notify: true
      },

      group: {
        type: Object,
        value: {
          data: {
            type: 'group',
            attributes: {
              contact_emails: [],
              quotas: [],
              privileges: []
            },
            relationships: {
              administrators: [],
              users: []
            }
          }
        },
        notify: true,
      },

      apiResponse: {
        type: Object,
        notify: true,
        observer: '_updateFromApi'
      },

      defaultUserRelation: {
        type: Object,
        value: {type: 'user'}
      },

      groupQuotas: {
        type: Array,
        notify: true
      },

      groupPrivileges: {
        type: Array,
        notify: true
      },

      //  -- Start properties for managing list of users --
      listValuesPath: {
        type: String,
        value: 'group.data.relationships.users'
      },

      listAddItemSelector: {
        type: String,
        value: '#addUserInput'
      },

      listDefaultObject: {
        type: Object,
        value: { type: 'user'}
      },

      listItemValuePath: {
        type: String,
        value: 'id'
      },
      //  -- End properties for managing list of users --

      sharedElements: {
        type: Object,
        value: function() {
          return {
            'hero': this.$.main
          };
        }
      },

      animationConfig: {
        type: Object,
        value: function() {
          return {
            'entry': [{
              name: 'hero-animation',
              id: 'hero',
              toPage: this
            }],
            'exit': [{
              name: 'scale-down-animation',
              node: this.$.main,
              transformOrigin: '50% 50%',
              axis: 'y'
            }]
          }
        }
      }
    },

    calculateVisibility: true,

    customRefresh() {
      if (app.params.groupId) {
        this.set('groupId', app.params.groupId);
        this.send();
      } else {
        this.set('groupId', null);
        this.set('group', this.properties.group.value);
        this._updatePrivileges();
        this._updateQuotas();
      }
    },

    _submit() {
      this.set('group.data.attributes.privileges', this._paramPrisvileges());
      this.set('group.data.attributes.quotas', this._paramQuotas());
      if (this.groupId) {
        this.set('submitMethod', 'PATCH');
      } else {
        this.set('submitMethod', 'POST');
      }
      this.$.submit.generateRequest();
    },

    _onClearButtonClick() {
      page('/groups');
    },

    _paramQuotas() {
      return this.groupQuotas.map(q => {
        return {name: q.backend, quota: parseInt(q.value)};
      });
    },

    _paramPrisvileges() {
      return this.groupPrivileges.filter(p => !!p.selected).map(p => p.backend);
    },

    _listAddItemInput() {
      return this.querySelector(this.listAddItemSelector);
    },

    _updateFromApi() {
      if (this.apiResponse) {
        this.set('group', this.apiResponse);
        this._updatePrivileges();
        this._updateQuotas();
      }
    },

    _updateQuotas() {
      let quotas = this.group.data.attributes.quotas;
      let groupQuotas = this.GroupQuotas.map(gp => {
        let newVal = quotas.find(available => available.name === gp.backend);
        gp.value = newVal && newVal.quota || null;
        return gp;
      });
      this.set('groupQuotas', groupQuotas);
      // Manually netify each quota value that it's been updated. This fixes
      // a problem where checkboxes and field values are not updated when
      // we empty these fields.
      this.groupQuotas.forEach((e, i) => {
        var path = `groupQuotas.${i}.value`;
        this.set(path, this.get(path));
      });
    },

    _updatePrivileges() {
      let privileges = this.group.data.attributes.privileges;
      let groupPrivileges = this.GroupPrivileges.map(gp => {
        gp.selected = privileges.find(available => available === gp.backend);
        return gp;
      });
      this.set('groupPrivileges', groupPrivileges);
      // Manually netify each quota value that it's been updated. This fixes
      // a problem where checkboxes and field values are not updated when
      // we empty these fields.
      this.groupPrivileges.forEach((e, i) => {
        var path = `groupPrivileges.${i}.selected`;
        this.set(path, !!this.get(path));
      });
    }
  });
